mixin parse(key, val, level)
  case Object.prototype.toString.call(val)
    when '[object Array]'
      type = 'Array'
    when '[object Object]'
      type = 'Dictionary'
    when '[object Boolean]'
      type = 'Boolean'
    when '[object Number]'
      type = 'Number'
    when '[object String]'
      type = 'String'

  indent = 40 * (level || 0)
    
  primitive = type != 'Dictionary' && type != 'Array'
  items = !primitive && Object.keys(val).length

  div(data-type="#{type} #{primitive ? 'primitive' : 'collection'}", data-key=key)
    span.expand-collapse(style="margin-left:#{indent}px;")
    span(data-field="key")=key
    span(data-controls)
      each action in ["copy", "paste", "ins", "del"]
        input(type="button", value=action, data-action=action)
    span(data-field="type")
      select(disabled="disabled")
        each t in ["Array", "Dictionary", "Boolean", "Number", "String"]
          option(value=t, selected=t==type)=t
    span(data-field="value")
      if type == 'Boolean'
        select
          option(value="1", selected=val) YES
          option(value="0", selected=!val) NO
      else if primitive
        | #{val}
      else
        | (#{items} #{items == 1 ? "item" : "items"})
    br
    if !primitive
      each v, k in val
        mixin parse(k, v, level+1)

mixin parse(key, value, level)
