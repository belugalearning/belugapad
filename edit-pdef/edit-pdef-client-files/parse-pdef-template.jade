types = { '[object Array]':'Array collection', '[object Object]':'Dictionary collection', '[object Boolean]':'Boolean primitive', '[object Number]':'Number primitive', '[object String]':'String primitive' }

mixin parse(key, val, level)
  indent = 40 * (level || 0)

  type = types[Object.prototype.toString.call(val)]
  primitive = !type.match(/collection$/)

  items = !primitive && Object.keys(val).length

  div(data-type=type, data-key=key)
    span.expand-collapse(style="margin-left:#{indent}px;")
    span(data-field="key")=key
    span(data-controls)
      each action in ["copy", "paste", "ins", "del"]
        input(type="button", value=action, data-action=action)
    span(data-field="type")
      select(disabled=level==0)
        each t in types
          option(value=t, selected=t==type)=t.match(/^(\S+)/)[1]
    span(data-field="value")
      if type == 'Boolean primitive'
        select
          option(value="1", selected=val) YES
          option(value="0", selected=!val) NO
      else if primitive
        | #{val}
      else
        | (#{items} #{items == 1 ? "item" : "items"})
    br
    if !primitive
      each v, k in val
        mixin parse(k, v, level+1)

mixin parse(key, value, level)
