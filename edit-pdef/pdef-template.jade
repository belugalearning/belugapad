mixin parse(key, val, level)
  case Object.prototype.toString.call(val)
    when '[object Array]'
      type = 'Array'
    when '[object Object]'
      type = 'Dictionary'
    when '[object Boolean]'
      type = 'Boolean'
    when '[object Number]'
      type = 'Number'
    when '[object String]'
      type = 'String'

  indent = 40 * (level || 0)
    
  primitive = type != 'Dictionary' && type != 'Array'
  items = !primitive && Object.keys(val).length

  div(data-type="#{type} #{primitive ? 'primitive' : 'collection'}")
    span.expand-collapse(style="margin-left:#{indent}px;")
    span(data-field="key")=key
    span(data-field="type")=type
    span(data-field="value")
      if primitive
        | #{val}
      else
        | (#{items} #{items == 1 ? "item" : "items"})
    if !primitive
      each v, k in val
        mixin parse(k, v, level+1)

mixin parse(key, value, level)
